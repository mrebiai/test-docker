name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  
env:
  ORIGIN_REPOSITORY: lectra-tech/karate-data
  # TODO when using Dockerhub
  # # Dockerhub
  # REGISTRY: docker.io
  # REGISTRY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  # REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  # IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/karate-data
  # # Tests
  # TEST_FULL_IMAGE_NAME: local/karate-data:test
  
  # TODO remove
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract tag name
        if: ${{ contains(github.ref, 'refs/tags/') && github.repository == env.ORIGIN_REPOSITORY }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Tag name is: $TAG"
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV

      - name: Use the tag name
        if: ${{ contains(github.ref, 'refs/tags/') && github.repository == env.ORIGIN_REPOSITORY }}
        run: |
          echo "The tag name extracted is: ${{ env.TAG_NAME }}"

      # TODO when using Dockerhub
      # - name: Detect a forked repository
      #   if: ${{ github.repository != env.ORIGIN_REPOSITORY }}
      #   run: |
      #     echo "REGISTRY=ghcr.io" >> "$GITHUB_ENV"
      #     echo "REGISTRY_USERNAME=${{ github.actor }}" >> "$GITHUB_ENV"
      #     echo "REGISTRY_PASSWORD=${{ secrets.GITHUB_TOKEN }}" >> "$GITHUB_ENV"
      #     echo "IMAGE_NAME=${{ github.repository }}" >> "$GITHUB_ENV"

      # # Install the cosign tool except on PR
      # # https://github.com/sigstore/cosign-installer
      # - name: Install cosign
      #   if: ${{ contains(github.ref, 'refs/tags/') && github.repository == env.ORIGIN_REPOSITORY }}
      #   uses: sigstore/cosign-installer@c56c2d3e59e4281cc41dea2217323ba5694b171e # v3.8.0
      #   with:
      #     cosign-release: 'v2.4.2'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      # - name: Extract Docker metadata - 1
      #   id: meta-1
      #   uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image - 1
        id: build-and-push-1
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
        with:
          context: .
          load: true
          file: ./Dockerfile
          platforms: linux/amd64 
          #,linux/arm64
          tags: test-docker:minimal
            # ${{ steps.meta-1.outputs.tags }}
          labels: ${{ steps.meta-1.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # build-args: |
          #   FOO=${{ secrets.FOO }}

      - name: Extract fat jar
        id: extract-fat-jar
        run: |
          docker container create --name temp-container test-docker:minimal
          docker container cp temp-container:/test-docker.jar test-docker.jar
          docker container rm temp-container
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: test-docker.jar

      # - name: Release
      #   id: release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     tag: v1.0.0
      #     # ${{ github.ref_name }}
      #   run: |
      #     output=$(gh release delete "${tag}" --cleanup-tag --yes 2>&1) || [[ "${output}" == "release not found" ]]
      #     gh release create "${tag}" --title="${tag}" --generate-notes lib.jar

      #     # --latest  
      #     # or
      #     # --latest=false
          

      # # Sign the resulting Docker image digest except on PRs.
      # # This will only write to the public Rekor transparency log when the Docker
      # # repository is public to avoid leaking data.  If you would like to publish
      # # transparency data even for private images, pass --force to cosign below.
      # # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image - 1
      #   if: ${{ contains(github.ref, 'refs/tags/') && github.repository == env.ORIGIN_REPOSITORY}}
      #   env:
      #     # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
      #     TAGS: ${{ steps.meta-1.outputs.tags }}
      #     DIGEST: ${{ steps.build-and-push-1.outputs.digest }}
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

